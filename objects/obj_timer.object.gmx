<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_timer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 전역 변수로 남은 시간을 300초로 설정
global.remain_time = 300;

// 전역 변수로 로보피아와 휴머니아 점수를 각각 0점으로 설정
global.robopia_score = 0;
global.humania_score = 0;

// 1초 마다 1번씩 타이머가 작동하도록 알람 등록
alarm[0] = 30;

// 배경음악 실행
audio_play_sound(sd_battle_field_morning, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 배경 변경을 위한 시간을 1 감소 시킴
background_convert_time -= 1;

// 배경 1번(해질녘), 2번(저녁)의 알파 값을 조정
background_alpha[1] = background_convert_time / 30;
background_alpha[2] = 1 - background_convert_time / 30;

// 배경 변경을 위한 시간이 아직 남아있다면 반복
if(background_convert_time != 0) {
    alarm[2] = 1;
}

// 시간이 모두 소진되었다면 배경 1번을 숨김
else {
    background_visible[1] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 배경 변경을 위한 시간을 1 감소 시킴
background_convert_time -= 1;

// 배경 0번(아침), 1번(해질녘)의 알파 값을 조정
background_alpha[0] = background_convert_time / 30;
background_alpha[1] = 1 - background_convert_time / 30;

// 배경 변경을 위한 시간이 아직 남아있다면 반복
if(background_convert_time != 0) {
    alarm[1] = 1;
}

// 시간이 모두 소진되었다면 배경 0번을 숨김
else {
    background_visible[0] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 남은 시간을 1초 감소
global.remain_time -= 1;

// 남은 시간이 200초가 되면 배경을 해질녘으로 변경
if(global.remain_time == 200) {
    // 초기에 배경 1번(해질녘)의 알파 값을 0으로 설정하고 보이도록 함
    background_alpha[1] = 0;
    background_visible[1] = true;
    
    // 배경 변경을 위한 시간을 30으로 설정 (30프레임)
    background_convert_time = 30;
    
    // 알람 1번에 등록 (1/30초 마다 호출)
    alarm[1] = 1;
    
    // 배경음악 변경
    audio_stop_sound(sd_battle_field_morning);
    audio_play_sound(sd_battle_field_afternoon, 0, 0);
}

// 남은 시간이 100초가 되면 배경을 저녁으로 변경
else if(global.remain_time == 100) {
    // 초기에 배경 2번(저녁)의 알파 값을 0으로 설정하고 보이도록 함
    background_alpha[2] = 0;
    background_visible[2] = true;
    
    // 달 오브젝트를 생성
    instance_create(192, -64, obj_moon);
    
    // 배경 변경을 위한 시간을 30으로 설정 (30프레임)
    background_convert_time = 30;
    
    // 알람 2번에 등록 (1/30초 마다 호출)
    alarm[2] = 1;
    
    // 배경음악 변경
    audio_stop_sound(sd_battle_field_afternoon);
    audio_play_sound(sd_battle_field_night, 0, 0);
}

// 알람 이벤트가 발생했을 경우 다시 1초 후에 발생하도록 알람 설정
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 남은 시간이 0이 아닐 경우
if(global.remain_time != -1 &amp;&amp; global.robopia_score &lt; 1500 &amp;&amp; global.humania_score &lt; 1500) {
    exit;
}

// 남은 시간이 0일 경우
else {
    // 게임 종료를 알리고 게임 종료
    if(global.robopia_score &gt; global.humania_score) {
        show_message("로보피아 " + string(global.robopia_score - global.humania_score) + "점차로 승리!");
    }
    
    else if(global.robopia_score &lt; global.humania_score) {
        show_message("휴머니아 " + string(global.humania_score - global.robopia_score) + "점차로 승리!");
    }
    
    else {
        show_message(string(global.humania_score) + "점으로 무승부!");
    }
    
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 자기 자신을 그림
draw_self();

// 남은 시간을 분과 초로 분리
var minutes = global.remain_time div 60;
var seconds = global.remain_time mod 60;
var minutes_str = "";
var seconds_str = "";

// 분이 10보다 작을 경우 앞에 0을 붙임
if(minutes &lt; 10) {
    minutes_str = "0" + string(minutes);
}

else {
    minutes_str = string(minutes);
}

// 초가 10보다 작을 경우 앞에 0을 붙임
if(seconds &lt; 10) {
    seconds_str = "0" + string(seconds);
}

else {
    seconds_str = string(seconds);
}

// 폰트, 색깔, 위치, 텍스트 설정 후 그림
draw_set_color(c_white);
draw_set_font(f_timer);
draw_text(x - 14, y + 20, minutes_str + ":" + seconds_str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
